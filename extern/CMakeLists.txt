include(ExternalProject)
set_property(DIRECTORY PROPERTY EP_PREFIX ${CMAKE_BINARY_DIR}/extern)
set(EXTERN_INCLUDES ${EXTERN_INCLUDES} ${CMAKE_BINARY_DIR}/extern/include)

#cpp-netlib
ExternalProject_Add(cpp-netlib
SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cpp-netlib
CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Release
           -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
           -DCPP-NETLIB_BUILD_SHARED_LIBS:BOOL=${BUILD_SHARED_LIBS}
           -DCPP-NETLIB_BUILD_EXAMPLES:BOOL=OFF -DCPP-NETLIB_BUILD_TESTS:BOOL=OFF
           -DCPP-NETLIB_DISABLE_LIBCXX:BOOL=OFF
           -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
           -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
           -DCMAKE_FIND_ROOT_PATH=${CMAKE_FIND_ROOT_PATH}
)

#rapidjson
ExternalProject_Add(rapidjson
SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/rapidjson
CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Release
           -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
           -DRAPIDJSON_BUILD_DOC:BOOL=OFF
           -DRAPIDJSON_BUILD_EXAMPLES:BOOL=OFF
           -DRAPIDJSON_BUILD_TESTS:BOOL=OFF
           -DRAPIDJSON_HAS_STDSTRING:BOOL=ON
           -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
           -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
           -DCMAKE_FIND_ROOT_PATH=${CMAKE_FIND_ROOT_PATH}
)

#jbson
ExternalProject_Add(jbson
SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/jbson
CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Release
           -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
           -DJBSON_ENABLE_TESTING:BOOL=OFF
           -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
           -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
           -DCMAKE_FIND_ROOT_PATH=${CMAKE_FIND_ROOT_PATH}
)

#lastfmpp
ExternalProject_Add(lastfmpp_${PROJECT_NAME}
SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lastfmpp
CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Release
           -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
           -DLASTFMPP_ENABLE_TESTING:BOOL=OFF
           -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
           -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
           -DCMAKE_FIND_ROOT_PATH=${CMAKE_FIND_ROOT_PATH}
)

#ejdb
ExternalProject_Add(ejdb
SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ejdb/tcejdb
CONFIGURE_COMMAND CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} <SOURCE_DIR>/configure --prefix=<INSTALL_DIR> --libdir=<INSTALL_DIR>/lib
#BUILD_COMMAND ${MAKE}
BUILD_IN_SOURCE 1
#INSTALL_COMMAND ${MAKE_INSTALL}
#TEST_COMMAND make check
)

set(ENV{PKG_CONFIG_PATH} "${LIBRARY_OUTPUT_PATH}/pkgconfig:$ENV{PKG_CONFIG_PATH}")

#ejpp
ExternalProject_Add(ejpp
SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/ejpp
CMAKE_ARGS -DCMAKE_BUILD_TYPE:STRING=Release
           -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
           -DEJPP_ENABLE_TESTING:BOOL=OFF
           -DCMAKE_C_COMPILER:STRING=${CMAKE_C_COMPILER} -DCMAKE_CXX_COMPILER:STRING=${CMAKE_CXX_COMPILER}
           -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
           -DCMAKE_FIND_ROOT_PATH=${CMAKE_FIND_ROOT_PATH}
)
add_dependencies(ejpp jbson ejdb)

#hana
set(EXTERN_INCLUDES ${EXTERN_INCLUDES} ${CMAKE_CURRENT_SOURCE_DIR}/hana/include)
FILE(GLOB_RECURSE hana_headers ${CMAKE_CURRENT_SOURCE_DIR}/hana/include/*.hpp)
add_custom_target(hana_headers_lib ALL SOURCES ${hana_headers})

set(EXTERN_INCLUDES ${EXTERN_INCLUDES} PARENT_SCOPE)
